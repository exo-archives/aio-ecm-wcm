Index: component/wcm/src/main/java/conf/portal/configuration.xml
===================================================================
--- component/wcm/src/main/java/conf/portal/configuration.xml	(revision 52416)
+++ component/wcm/src/main/java/conf/portal/configuration.xml	(working copy)
@@ -192,5 +192,43 @@
 	    </init-params>
 	  </component-plugin>	  
 	</external-component-plugins>
-	   
+
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.jcr.impl.ext.action.SessionActionCatalog</target-component>
+    <component-plugin>
+      <name>addActions</name>
+      <set-method>addPlugin</set-method>
+      <type>org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin</type>
+      <description>Add mixin exo:rss-enabled and property exo:title of TARGET NODE for SYMLINK NODE</description>
+      <init-params>
+        <object-param>
+          <name>actions</name>
+          <object type="org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin$ActionsConfig">
+            <field  name="actions">
+              <collection type="java.util.ArrayList">
+                <value>
+                  <object type="org.exoplatform.services.jcr.impl.ext.action.ActionConfiguration">
+                    <field name="nodeTypes"><string>exo:taxonomyLink</string></field>
+                    <field name="eventTypes"><string>addProperty</string></field>
+                    <field name="actionClassName"><string>org.exoplatform.services.wcm.symlink.CreateLinkAction</string></field>
+                  </object>
+                </value>
+              </collection>
+            </field>
+          </object>
+        </object-param>
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>
+
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.listener.ListenerService</target-component>
+    <component-plugin>
+      <name>WCMPublicationService.event.updateState</name>
+      <set-method>addListener</set-method>
+      <type>org.exoplatform.services.wcm.symlink.PublicationUpdateStateListener</type>
+      <description>this listener will update the link's metadata</description>
+    </component-plugin>
+  </external-component-plugins>
+
 </configuration>
\ No newline at end of file
Index: component/wcm/src/main/java/conf/wcm-nodetypes.xml
===================================================================
--- component/wcm/src/main/java/conf/wcm-nodetypes.xml	(revision 52416)
+++ component/wcm/src/main/java/conf/wcm-nodetypes.xml	(working copy)
@@ -256,6 +256,23 @@
         </defaultValues>
       </propertyDefinition>      
     </propertyDefinitions>
+  </nodeType>
+  
+  <nodeType name="exo:sortable" isMixin="true" hasOrderableChildNodes="false" primaryItemName="">
+    <propertyDefinitions>
+      <propertyDefinition name="exo:title" requiredType="String" autoCreated="true" mandatory="false" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>       
+      </propertyDefinition>
+      <propertyDefinition name="exo:titlePublished" requiredType="String" autoCreated="true" mandatory="false" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>       
+      </propertyDefinition>
+      <propertyDefinition name="exo:name" requiredType="String" autoCreated="true" mandatory="false" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>       
+      </propertyDefinition>
+      <propertyDefinition name="publication:liveDate" requiredType="Date" autoCreated="true" mandatory="false" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>       
+      </propertyDefinition>      
+    </propertyDefinitions>
   </nodeType>             
      
 </nodeTypes>
Index: component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/CreateLinkAction.java
===================================================================
--- component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/CreateLinkAction.java	(revision 0)
+++ component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/CreateLinkAction.java	(revision 0)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2003-2010 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.services.wcm.symlink;
+
+import javax.jcr.Node;
+import javax.jcr.Property;
+
+import org.apache.commons.chain.Context;
+import org.exoplatform.services.cms.CmsService;
+import org.exoplatform.services.cms.link.LinkManager;
+import org.exoplatform.services.command.action.Action;
+import org.exoplatform.services.listener.ListenerService;
+import org.exoplatform.services.wcm.utils.WCMCoreUtils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Phan Le Thanh Chuong
+ *          chuong.phan@exoplatform.com, phan.le.thanh.chuong@gmail.com
+ * Jun 8, 2010  
+ */
+public class CreateLinkAction implements Action{
+
+  public static final String UPDATE_EVENT = "WCMPublicationService.event.updateState";
+//  private static Log log = ExoLogger.getLogger("wcm:CreateLinkAction");
+  
+  public boolean execute(Context context) throws Exception {
+    Property property = (Property)context.get("currentItem");
+    if (!"exo:uuid".equals(property.getName())) return false;
+    
+    Node linkNode = property.getParent();
+    if (!linkNode.canAddMixin("exo:sortable")) return false;
+    
+    LinkManager linkManager = WCMCoreUtils.getService(LinkManager.class);
+    Node targetNode = linkManager.getTarget(linkNode);
+
+    ListenerService listenerService = WCMCoreUtils.getService(ListenerService.class);
+    CmsService cmsService = WCMCoreUtils.getService(CmsService.class);
+
+    listenerService.broadcast(UPDATE_EVENT, cmsService, targetNode);
+    
+    return true;
+  }
+  
+}
Index: component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/PublicationUpdateStateListener.java
===================================================================
--- component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/PublicationUpdateStateListener.java	(revision 0)
+++ component/wcm/src/main/java/org/exoplatform/services/wcm/symlink/PublicationUpdateStateListener.java	(revision 0)
@@ -0,0 +1,194 @@
+/*
+ * Copyright (C) 2003-2010 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.services.wcm.symlink;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.Session;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+
+import org.apache.commons.logging.Log;
+import org.exoplatform.services.cms.CmsService;
+import org.exoplatform.services.jcr.RepositoryService;
+import org.exoplatform.services.listener.Event;
+import org.exoplatform.services.listener.Listener;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.wcm.utils.WCMCoreUtils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Phan Le Thanh Chuong
+ *          chuong.phan@exoplatform.com, phan.le.thanh.chuong@gmail.com
+ * Jun 11, 2010  
+ */
+public class PublicationUpdateStateListener extends Listener<CmsService, Node> {
+
+  private static Log log = ExoLogger.getLogger("wcm:ModifyLinkListener");
+  
+  private RepositoryService repositoryService;
+  
+  public PublicationUpdateStateListener() {
+    repositoryService = WCMCoreUtils.getService(RepositoryService.class);
+  }
+  
+  public void onEvent(Event<CmsService, Node> event) throws Exception {
+	if ("WCMPublicationService.event.updateState".equals(event.getEventName())) {
+		Node targetNode = event.getData();
+		if (targetNode.isNodeType("exo:taxonomyLink")) return;
+		try {
+			targetNode.getUUID();
+		} catch (UnsupportedRepositoryOperationException e) {
+			return;
+		}
+		String title = null;
+		String name = targetNode.getName();
+		Node liveNode = null;
+		Calendar liveDate = null;
+		String titlePublished = null;
+		// We missing an action to update the modified date of the node
+		Calendar dateModified = new GregorianCalendar();
+		targetNode.setProperty("exo:dateModified", dateModified);
+		
+		if (targetNode.hasProperty("exo:title")) {
+			try {
+				title = targetNode.getProperty("exo:title").getString();
+			} catch (PathNotFoundException e) {
+				log.info("No such of property exo:title for this node:");
+			}
+		}
+		
+		if (targetNode.hasProperty("publication:liveDate")) {
+			try {
+				liveDate = targetNode.getProperty("publication:liveDate").getDate();
+			} catch (PathNotFoundException e) {
+				log.info("No such of property publication:liveDate for this node:");
+			}
+		}
+
+	    try {
+	        String nodeVersionUUID = targetNode.getProperty("publication:liveRevision").getString(); 
+	        Node revNode = targetNode.getVersionHistory().getSession().getNodeByUUID(nodeVersionUUID);
+	        if (revNode!=null)
+	        	liveNode = revNode.getNode("jcr:frozenNode");
+	    } catch (Exception e) { }
+
+		if (targetNode.hasProperty("publication:currentState") && liveNode != null) {
+		try {
+			if (!targetNode.isNodeType("exo:sortable") && targetNode.canAddMixin("exo:sortable")) {
+				targetNode.addMixin("exo:sortable");
+			}
+		} catch (PathNotFoundException e) {}
+		}
+	    
+	    if (liveNode!=null && liveNode.hasProperty("exo:title")) {
+			titlePublished = targetNode.hasProperty("exo:titlePublished")?targetNode.getProperty("exo:titlePublished").getString():null;
+			String liveTitle = liveNode.getProperty("exo:title").getString();
+			if (liveTitle != null && !liveTitle.equals(titlePublished)) {
+				targetNode.setProperty("exo:titlePublished", liveTitle);
+				titlePublished = liveTitle;
+				targetNode.save();
+			}
+	    }
+		
+		
+//		NodeLocation targetLocation = NodeLocation.make(targetNode);
+		String[] wsNames = repositoryService.getCurrentRepository().getWorkspaceNames();
+		for (String workspace:wsNames) {
+			Session session = repositoryService.getCurrentRepository().getSystemSession(workspace);
+//		Session session = repositoryService.getCurrentRepository().login(targetLocation.getWorkspace());
+			QueryManager queryManager = session.getWorkspace().getQueryManager();
+			Query query = queryManager.createQuery("SELECT * FROM exo:taxonomyLink WHERE exo:uuid='" + targetNode.getUUID() + "'", Query.SQL);
+			NodeIterator iterator = query.execute().getNodes();
+			boolean needSessionSave=false;
+			while (iterator.hasNext()) {
+				Node linkNode = iterator.nextNode();
+				if (!linkNode.isNodeType("exo:sortable")) {
+					if (!linkNode.canAddMixin("exo:sortable")) {
+						break;
+					}
+				    linkNode.addMixin("exo:sortable");
+				}
+				try {
+					String currentName = linkNode.hasProperty("exo:name")?linkNode.getProperty("exo:name").getString():null;
+					if (name != null && !name.equals(currentName)) {
+						linkNode.setProperty("exo:name", name);
+						needSessionSave = true;
+					}
+				} catch (PathNotFoundException e) {}
+				
+				try {
+					String currentTitle = linkNode.hasProperty("exo:title")?linkNode.getProperty("exo:title").getString():null;
+					if (title != null && !title.equals(currentTitle)) {
+						linkNode.setProperty("exo:title", title);
+						needSessionSave = true;
+					}
+				} catch (PathNotFoundException e) {}
+				
+//				if (targetNode.hasProperty("publication:currentState") && "published".equals(targetNode.getProperty("publication:currentState").getString())) {
+				try {
+					String currentTitlePublished = linkNode.hasProperty("exo:titlePublished")?linkNode.getProperty("exo:titlePublished").getString():null;
+					if (titlePublished != null && !titlePublished.equals(currentTitlePublished)) {
+						linkNode.setProperty("exo:titlePublished", titlePublished);
+						needSessionSave = true;
+					}
+				} catch (PathNotFoundException e) {}
+//				}
+				
+				try {
+					Calendar currentLiveDate = linkNode.hasProperty("publication:liveDate")?linkNode.getProperty("publication:liveDate").getDate():null;
+					if (liveDate != null && !liveDate.equals(currentLiveDate)) {
+						linkNode.setProperty("publication:liveDate", liveDate);
+						needSessionSave = true;
+					}
+				} catch (PathNotFoundException e) {}
+				
+				try {
+					Calendar currentDateModified = linkNode.getProperty("exo:dateModified").getDate();
+					if (dateModified != null && !dateModified.equals(currentDateModified)) {
+						linkNode.setProperty("exo:dateModified", dateModified);  
+						needSessionSave = true;
+					}
+				} catch (PathNotFoundException e) {}
+				
+				if (log.isInfoEnabled()) {
+					String currentState = targetNode.hasProperty("publication:currentState")?targetNode.getProperty("publication:currentState").getString():"";
+					String currentName = linkNode.hasProperty("exo:name")?linkNode.getProperty("exo:name").getString():"";
+					String currentTitle = linkNode.hasProperty("exo:title")?linkNode.getProperty("exo:title").getString():"";
+					String currentTitlePub = linkNode.hasProperty("exo:titlePublished")?linkNode.getProperty("exo:titlePublished").getString():"";
+					String currentLiveDate = linkNode.hasProperty("publication:liveDate")?linkNode.getProperty("publication:liveDate").getDate().getTime().toString():"";
+					String currentDateModified = linkNode.hasProperty("exo:dateModified")?linkNode.getProperty("exo:dateModified").getDate().getTime().toString():"";
+					
+					log.info("@@@@ "+needSessionSave+" @state@"+currentState+" @Name@"+currentName+" @Title@"+currentTitle+" @TitlePub@"+currentTitlePub+" @DateLive@"+currentLiveDate+" @DateMod@"+currentDateModified);
+				}
+				
+//      linkNode.setProperty("exo:dateModified", dateModified);
+				
+			}
+			if (needSessionSave) session.save();
+			
+		}
+	}
+    return;
+  }
+  
+}
Index: component/publication/src/main/java/org/exoplatform/services/wcm/publication/lifecycle/stageversion/ui/UIPublicationPanel.java
===================================================================
--- component/publication/src/main/java/org/exoplatform/services/wcm/publication/lifecycle/stageversion/ui/UIPublicationPanel.java	(revision 52416)
+++ component/publication/src/main/java/org/exoplatform/services/wcm/publication/lifecycle/stageversion/ui/UIPublicationPanel.java	(working copy)
@@ -32,12 +32,13 @@
 import javax.jcr.version.VersionIterator;
 
 import org.exoplatform.ecm.webui.utils.JCRExceptionManager;
-import org.exoplatform.services.ecm.publication.PublicationPlugin;
-import org.exoplatform.services.ecm.publication.PublicationService;
+import org.exoplatform.portal.webui.util.Util;
 import org.exoplatform.services.wcm.core.NodeLocation;
 import org.exoplatform.services.wcm.publication.PublicationDefaultStates;
+import org.exoplatform.services.wcm.publication.WCMPublicationService;
 import org.exoplatform.services.wcm.publication.lifecycle.stageversion.StageAndVersionPublicationConstant;
 import org.exoplatform.services.wcm.publication.lifecycle.stageversion.config.VersionData;
+import org.exoplatform.services.wcm.utils.WCMCoreUtils;
 import org.exoplatform.web.application.ApplicationMessage;
 import org.exoplatform.webui.config.annotation.ComponentConfig;
 import org.exoplatform.webui.config.annotation.EventConfig;
@@ -83,12 +84,22 @@
   /** The viewed revisions. */
   private List<Node> viewedRevisions = new ArrayList<Node>(3);
   
+  private WCMPublicationService wcmPublicationService;
+  
+  private String sitename;
+  
+  private String remoteuser;
+  
   /**
    * Instantiates a new uI publication panel.
    * 
    * @throws Exception the exception
    */
-  public UIPublicationPanel() throws Exception {}
+  public UIPublicationPanel() throws Exception {
+    wcmPublicationService = WCMCoreUtils.getService(WCMPublicationService.class);
+    sitename = Util.getPortalRequestContext().getPortalOwner();
+    remoteuser = Util.getPortalRequestContext().getRemoteUser();
+  }
   
   /**
    * Inits the.
@@ -393,15 +404,8 @@
     public void execute(Event<UIPublicationPanel> event) throws Exception {
       UIPublicationPanel publicationPanel = event.getSource();
       Node currentNode = publicationPanel.getCurrentNode();
-      PublicationService publicationService = publicationPanel.getApplicationComponent(PublicationService.class);
-      PublicationPlugin publicationPlugin = publicationService.getPublicationPlugins().get(StageAndVersionPublicationConstant.LIFECYCLE_NAME);
-      HashMap<String,String> context = new HashMap<String,String>();
-      Node currentRevision = publicationPanel.getCurrentRevision();
-      if(currentRevision != null) {
-        context.put(StageAndVersionPublicationConstant.CURRENT_REVISION_NAME,currentRevision.getName()); 
-      }      
+      publicationPanel.wcmPublicationService.updateLifecyleOnChangeContent(currentNode, publicationPanel.sitename, publicationPanel.remoteuser, PublicationDefaultStates.DRAFT);
       try {
-        publicationPlugin.changeState(currentNode,PublicationDefaultStates.DRAFT,context);
         publicationPanel.updatePanel();
       } catch (Exception e) {
         UIApplication uiApp = publicationPanel.getAncestorOfType(UIApplication.class);
@@ -431,15 +435,8 @@
     public void execute(Event<UIPublicationPanel> event) throws Exception {
       UIPublicationPanel publicationPanel = event.getSource();      
       Node currentNode = publicationPanel.getCurrentNode();
-      PublicationService publicationService = publicationPanel.getApplicationComponent(PublicationService.class);
-      PublicationPlugin publicationPlugin = publicationService.getPublicationPlugins().get(StageAndVersionPublicationConstant.LIFECYCLE_NAME);
-      HashMap<String,String> context = new HashMap<String,String>();      
-      Node currentRevision = publicationPanel.getCurrentRevision();
-      if(currentRevision != null) {
-        context.put(StageAndVersionPublicationConstant.CURRENT_REVISION_NAME,currentRevision.getName()); 
-      }
+      publicationPanel.wcmPublicationService.updateLifecyleOnChangeContent(currentNode, publicationPanel.sitename, publicationPanel.remoteuser, PublicationDefaultStates.PUBLISHED);
       try {
-        publicationPlugin.changeState(currentNode,PublicationDefaultStates.PUBLISHED,context); 
         publicationPanel.updatePanel();
       } catch (Exception e) {        
         UIApplication uiApp = publicationPanel.getAncestorOfType(UIApplication.class);
@@ -469,15 +466,8 @@
     public void execute(Event<UIPublicationPanel> event) throws Exception {
       UIPublicationPanel publicationPanel = event.getSource();     
       Node currentNode = publicationPanel.getCurrentNode();
-      PublicationService publicationService = publicationPanel.getApplicationComponent(PublicationService.class);
-      PublicationPlugin publicationPlugin = publicationService.getPublicationPlugins().get(StageAndVersionPublicationConstant.LIFECYCLE_NAME);
-      HashMap<String,String> context = new HashMap<String,String>();
-      Node currentRevision = publicationPanel.getCurrentRevision();
-      if(currentRevision != null) {
-        context.put(StageAndVersionPublicationConstant.CURRENT_REVISION_NAME,currentRevision.getName()); 
-      }
+      publicationPanel.wcmPublicationService.updateLifecyleOnChangeContent(currentNode, publicationPanel.sitename, publicationPanel.remoteuser, PublicationDefaultStates.OBSOLETE);
       try {
-        publicationPlugin.changeState(currentNode,PublicationDefaultStates.OBSOLETE,context); 
         publicationPanel.updatePanel();
       } catch (Exception e) {
         UIApplication uiApp = publicationPanel.getAncestorOfType(UIApplication.class);
Index: component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMComposerImpl.java
===================================================================
--- component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMComposerImpl.java	(revision 52416)
+++ component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMComposerImpl.java	(working copy)
@@ -87,6 +87,7 @@
 		publicationService = WCMCoreUtils.getService(PublicationService.class);
 		templateService = WCMCoreUtils.getService(TemplateService.class);
 		wcmService = WCMCoreUtils.getService(WCMService.class);
+		taxonomyService = WCMCoreUtils.getService(TaxonomyService.class);
 		cache = WCMCoreUtils.getService(CacheService.class).getCacheInstance("wcm.composer");
 //		cache.setLiveTime(60);
 	}
@@ -113,7 +114,7 @@
 		  if (nodeIdentifier.lastIndexOf("/") == 0) nodeIdentifier = nodeIdentifier.substring(1); 
 		}
 		if (MODE_LIVE.equals(mode) && isCached) {
-		  String hash = getHash(nodeIdentifier, version, remoteUser);
+		  String hash = getHash(nodeIdentifier, version, remoteUser, null, null);
 		  Node cachedNode = (Node)cache.get(hash);
 		  if (cachedNode != null) return cachedNode;
 		}
@@ -127,7 +128,7 @@
 			node = getViewableContent(node, filters);
 		}
 		if (MODE_LIVE.equals(mode) && isCached) {
-			String hash = getHash(nodeIdentifier, version, remoteUser);
+		  String hash = getHash(nodeIdentifier, version, remoteUser, null, null);
 			cache.remove(hash);
 			cache.put(hash, node);
 		}
@@ -138,16 +139,27 @@
 	public List<Node> getContents(String repository, String workspace, String path, HashMap<String, String> filters, SessionProvider sessionProvider) throws Exception {
 		String mode = filters.get(FILTER_MODE);
 		String version = filters.get(FILTER_VERSION);
+		String orderBy = filters.get(FILTER_ORDER_BY);
+		String orderType = filters.get(FILTER_ORDER_TYPE);
   		String remoteUser = null;
   		try {
   			remoteUser = Util.getPortalRequestContext().getRemoteUser();
   		} catch (Exception e) {}
+ 		if (MODE_EDIT.equals(mode) && "publication:liveDate".equals(orderBy)) {
+ 		  orderBy = "exo:dateModified";
+  	  filters.put(FILTER_ORDER_BY, orderBy);
+ 		}
+ 		if (MODE_LIVE.equals(mode) && "exo:title".equals(orderBy)) {
+ 	    orderBy = "exo:titlePublished "+orderType+", exo:title";
+ 	    filters.put(FILTER_ORDER_BY, orderBy);
+ 		}
 
 		if (MODE_LIVE.equals(mode) && isCached) {
-			String hash = getHash(path, version, remoteUser);
+		  String hash = getHash(path, version, remoteUser, orderBy, orderType);
 			List<Node> cachedNodes = (List<Node>)cache.get(hash);
 			if (cachedNodes != null) return cachedNodes;
 		}
+		if (log.isInfoEnabled()) log.info("##### "+path+":"+version+":"+remoteUser+":"+orderBy+":"+orderType);
 		NodeIterator nodeIterator = getViewableContents(repository, workspace, path, filters, sessionProvider);
 		List<Node> nodes = new ArrayList<Node>();
 		Node node = null, viewNode = null;
@@ -159,7 +171,7 @@
 			}
 		}
 		if (MODE_LIVE.equals(mode) && isCached) {
-			String hash = getHash(path, version, remoteUser);
+		  String hash = getHash(path, version, remoteUser, orderBy, orderType);
 			cache.remove(hash);
 			cache.put(hash, nodes);
 		}
@@ -205,7 +217,7 @@
 	 * @throws Exception the exception
 	 */
 	private Node getViewableContent(Node node, HashMap<String, String> filters) throws Exception {
-		if (node.isNodeType("exo:taxonomyLink")) 
+		if (node.isNodeType("exo:taxonomyLink"))  
 			try {
 				node = linkManager.getTarget(node);
 			}catch(AccessDeniedException ade) {
@@ -230,6 +242,9 @@
 	 * @see org.exoplatform.services.wcm.publication.WCMComposer#updateContent(java.lang.String, java.lang.String, java.lang.String, java.util.HashMap)
 	 */
 	public boolean updateContent(String repository, String workspace, String path, HashMap<String, String> filters) throws Exception {
+	  String orderBy = filters.get(FILTER_ORDER_BY);
+	  String orderType = filters.get(FILTER_ORDER_TYPE);
+
 		if (isCached) {
 			if (log.isInfoEnabled()) log.info("updateContent : "+path);
 			String part = path.substring(0, path.lastIndexOf("/"));
@@ -267,32 +282,47 @@
 
 	  		
 			/* remove live cache */
-			String hash = getHash(path, null);
+			String hash = getHash(path, null, orderBy, orderType);
 			cache.remove(hash);
 			/* remove base content cache */
-			hash = getHash(path, BASE_VERSION);
+			hash = getHash(path, BASE_VERSION, orderBy, orderType);
 			cache.remove(hash);
+			
+			Node node = wcmService.getReferencedContent(sessionProvider, repository, workspace, path);
+			List<Node> listCategory = getCategories(node, repository);
+			List<Node> lstTaxonomyTrees = getAllTaxonomyTrees(repository);
+			if (listCategory != null && listCategory.size() > 0) {
+			  for (Node categoryNode: listCategory) {
+			    String value = displayCategory(categoryNode, lstTaxonomyTrees);
+			    if(value!=null && !value.equals("")){
+			      value = value + "/" + node.getName();
+			      hash = getHash(value, filters.get(FILTER_VERSION), remoteUser, orderBy, orderType);
+			      cache.remove(hash);
+			    }
+			  }
+			}
+
 			/* remove parent cache */
-			hash = getHash(part, null);
+			hash = getHash(part, null, orderBy, orderType);
 			cache.remove(hash);
 			if (oid!=null) {
 				/* remove live cache */
-				hash = getHash(oid, null);
+			  hash = getHash(oid, null, orderBy, orderType);
 				cache.remove(hash);
 			}
 			if (remoteUser!=null) {
 				/* remove live cache for current user */
-				hash = getHash(path, null, remoteUser);
+			  hash = getHash(path, null, remoteUser, orderBy, orderType);
 				cache.remove(hash);
 				/* remove base content cache for current user */
-				hash = getHash(path, BASE_VERSION, remoteUser);
+				hash = getHash(path, BASE_VERSION, remoteUser, orderBy, orderType);
 				cache.remove(hash);
 				/* remove parent cache for current user */
-				hash = getHash(part, null, remoteUser);
+				hash = getHash(part, null, remoteUser, orderBy, orderType);
 				cache.remove(hash);
 				if (oid!=null) {
 					/* remove live cache */
-					hash = getHash(oid, null, remoteUser);
+				  hash = getHash(oid, null, remoteUser, orderBy, orderType);
 					cache.remove(hash);
 				}
 			}
@@ -300,27 +330,61 @@
 		return true;
 	}
 
+	public List<Node> getCategories(Node node, String repository) throws Exception {
+	  if (taxonomyService==null) taxonomyService = WCMCoreUtils.getService(TaxonomyService.class);
+	  List<Node> listCategories = new ArrayList<Node>();
+	  List<Node> listNode = getAllTaxonomyTrees(repository);
+	  for(Node itemNode : listNode) {
+	    listCategories.addAll(taxonomyService.getCategories(node, itemNode.getName()));
+	  }
+	  return listCategories;
+	}
+
+	List<Node> getAllTaxonomyTrees(String repository) throws RepositoryException {
+	  if (taxonomyService==null) taxonomyService = WCMCoreUtils.getService(TaxonomyService.class);
+	  return taxonomyService.getAllTaxonomyTrees(repository);
+	}
+
+	String displayCategory(Node node, List<Node> taxonomyTrees) {
+	  try {
+	    for (Node taxonomyTree : taxonomyTrees) {
+	      if (node.getPath().contains(taxonomyTree.getPath())) {
+	        return node.getPath().replace(taxonomyTree.getPath(), taxonomyTree.getName());
+	      }
+	    }
+	  } catch (RepositoryException e) {
+	    log.error("Unexpected error when getting node taxonomies");
+	  }
+	  return "";
+	}
+	
 	/* (non-Javadoc)
 	 * @see org.exoplatform.services.wcm.publication.WCMComposer#updateContents(java.lang.String, java.lang.String, java.lang.String, java.util.HashMap)
 	 */
 	public boolean updateContents(String repository, String workspace, String path, HashMap<String, String> filters) throws Exception {
+	  String[] orderBys = {"exo:title", "publication:liveDate", "exo:dateModified", "exo:dateCreated"};
+	  String[] orderTypes = {"ASC", "DESC"};
 		if (isCached) {
 	  		String remoteUser = null;
 	  		try {
 	  			remoteUser = Util.getPortalRequestContext().getRemoteUser();
 	  		} catch (Exception e) {}
 
-	  		if (log.isInfoEnabled()) log.info("updateContents : "+path);
-			String hash = getHash(path, null);
-			cache.remove(hash);
-			hash = getHash(path, BASE_VERSION);
-			cache.remove(hash);
-			if (remoteUser!=null) {
-				hash = getHash(path, null, remoteUser);
-				cache.remove(hash);
-				hash = getHash(path, BASE_VERSION, remoteUser);
-				cache.remove(hash);
-			}
+	  		for (String orderBy:orderBys) {
+	  		  for (String orderType:orderTypes) {
+	  		    String hash = getHash(path, null, orderBy, orderType);
+	  		    cache.remove(hash);
+	  		    hash = getHash(path, BASE_VERSION, orderBy, orderType);
+	  		    cache.remove(hash);
+	  		    if (remoteUser!=null) {
+	  		      hash = getHash(path, null, remoteUser, orderBy, orderType);
+	  		      cache.remove(hash);
+	  		      hash = getHash(path, BASE_VERSION, remoteUser, orderBy, orderType);
+	  		      cache.remove(hash);
+	  		    }
+	  		  }
+	  		}
+
 		}
 		return true;
 	}
@@ -369,6 +433,7 @@
 		String orderQuery = " ORDER BY ";
 		String orderBy = filters.get(FILTER_ORDER_BY);
 		String orderType = filters.get(FILTER_ORDER_TYPE);
+		String mode = filters.get(FILTER_MODE);
 		if (orderType == null) orderType = "DESC";
 		if (orderBy == null) orderBy = "exo:title";
 		orderQuery += orderBy + " " + orderType;
@@ -392,7 +457,7 @@
 					if (i != (documentTypes.size() - 1)) documentTypeClause.append(" OR ");
 				}
 				templatesFilter = documentTypeClause.toString();
-				templatesFilter += "OR jcr:primaryType = 'exo:taxonomyLink')";
+				templatesFilter += " OR jcr:primaryType = 'exo:taxonomyLink' OR jcr:primaryType = 'exo:symlink')";
 				return templatesFilter;
 			} catch (Exception e) {
 				log.error("Error when perform getTemlatesSQLFilter: ", e);
@@ -422,17 +487,17 @@
 		}
 	}
 
-	  private String getHash(String path, String version, String remoteUser) throws Exception {
+	private String getHash(String path, String version, String remoteUser, String orderBy, String orderType) throws Exception {
 		  String key = path;
 		  if (version!=null) key += "::"+version;
 		  if (remoteUser!=null) key += ";;"+remoteUser;
+		  if (orderBy!=null) key += ";;"+orderBy;
+		  if (orderType!=null) key += ";;"+orderType;
 		  return MessageDigester.getHash(key);
-	  }
+  }
 	  
-	  private String getHash(String path, String version) throws Exception {
-		  return getHash(path, version, null);
-	  }
+	private String getHash(String path, String version, String orderBy, String orderType) throws Exception {
+	  return getHash(path, version, null, orderBy, orderType);
+  }
 
-
-
 }
Index: component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationService.java
===================================================================
--- component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationService.java	(revision 52416)
+++ component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationService.java	(working copy)
@@ -34,6 +34,8 @@
  */
 public interface WCMPublicationService {   
   
+  public static final String UPDATE_EVENT = "WCMPublicationService.event.updateState";
+  
  /**
   * Add a Web Publication Plugin to the service.
   * The method caches all added plugins.
Index: component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationServiceImpl.java
===================================================================
--- component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationServiceImpl.java	(revision 52416)
+++ component/publication/src/main/java/org/exoplatform/services/wcm/publication/WCMPublicationServiceImpl.java	(working copy)
@@ -23,9 +23,11 @@
 
 import org.exoplatform.portal.config.model.Page;
 import org.exoplatform.portal.config.model.PageNavigation;
+import org.exoplatform.services.cms.CmsService;
 import org.exoplatform.services.ecm.publication.NotInPublicationLifecycleException;
 import org.exoplatform.services.ecm.publication.PublicationPlugin;
 import org.exoplatform.services.ecm.publication.PublicationService;
+import org.exoplatform.services.listener.ListenerService;
 import org.exoplatform.services.wcm.publication.lifecycle.simple.SimplePublicationPlugin;
 import org.exoplatform.services.wcm.publication.lifecycle.stageversion.StageAndVersionPublicationConstant;
 import org.exoplatform.services.wcm.utils.WCMCoreUtils;
@@ -45,6 +47,10 @@
   
   /** The publication service. */
   private PublicationService publicationService;
+  
+  private ListenerService listenerService;
+  
+  private CmsService cmsService;
 
   /**
    * Instantiates a new WCM publication service.
@@ -53,7 +59,9 @@
    * @param publicationService the publication service
    */
   public WCMPublicationServiceImpl() {
-    this.publicationService = WCMCoreUtils.getService(PublicationService.class);
+    this.publicationService = WCMCoreUtils.getService(PublicationService.class);
+    this.listenerService = WCMCoreUtils.getService(ListenerService.class);
+    this.cmsService = WCMCoreUtils.getService(CmsService.class);
   }
 
   /* (non-Javadoc)
@@ -269,6 +277,7 @@
 	    	publicationPlugin.updateLifecyleOnChangeContent(node, remoteUser, newState);
 	    else
 	    	publicationPlugin.updateLifecyleOnChangeContent(node, remoteUser);
+	    listenerService.broadcast(UPDATE_EVENT, cmsService, node);
 	}
 
 	public String getContentState(Node node) throws Exception {
