Index: component/search/src/main/java/org/exoplatform/services/wcm/search/SiteSearchServiceImpl.java
===================================================================
--- component/search/src/main/java/org/exoplatform/services/wcm/search/SiteSearchServiceImpl.java	(revision 48644)
+++ component/search/src/main/java/org/exoplatform/services/wcm/search/SiteSearchServiceImpl.java	(working copy)
@@ -30,11 +30,14 @@
 import javax.jcr.query.QueryResult;
 import javax.jcr.query.RowIterator;
 
+import org.apache.commons.logging.Log;
 import org.exoplatform.container.xml.InitParams;
+import org.exoplatform.container.xml.ValueParam;
 import org.exoplatform.services.cms.templates.TemplateService;
 import org.exoplatform.services.jcr.RepositoryService;
 import org.exoplatform.services.jcr.core.ManageableRepository;
 import org.exoplatform.services.jcr.ext.common.SessionProvider;
+import org.exoplatform.services.log.ExoLogger;
 import org.exoplatform.services.wcm.core.NodeLocation;
 import org.exoplatform.services.wcm.core.WCMConfigurationService;
 import org.exoplatform.services.wcm.portal.LivePortalManagerService;
@@ -53,6 +56,12 @@
  */
 public class SiteSearchServiceImpl implements SiteSearchService {
 
+  protected static final Log log = ExoLogger.getLogger("wcm:SiteSearchServiceImpl"); 
+  
+  private static final String IS_ENABLED_FUZZY_SEARCH = "isEnabledFuzzySearch";
+  
+  private static final String FUZZY_SEARCH_INDEX = "fuzzySearchIndex";
+  
   /** The live portal manager service. */
   private LivePortalManagerService livePortalManagerService;
 
@@ -77,6 +86,10 @@
   /** The include mime types. */
   private CopyOnWriteArraySet<String> includeMimeTypes = new CopyOnWriteArraySet<String>();
 
+  private boolean isEnabledFuzzySearch = true;
+  
+  private double fuzzySearchIndex = 0.5;
+  
   /**
    * Instantiates a new site search service impl.
    * 
@@ -93,7 +106,27 @@
     this.livePortalManagerService = portalManagerService;
     this.templateService = templateService;
     this.repositoryService = repositoryService;
-    this.configurationService = configurationService;        
+    this.configurationService = configurationService;
+    
+    if (initParams != null) {
+      ValueParam isEnabledFuzzySearchValue = initParams.getValueParam(IS_ENABLED_FUZZY_SEARCH);
+      if (isEnabledFuzzySearchValue != null)
+        isEnabledFuzzySearch = Boolean.parseBoolean(isEnabledFuzzySearchValue.getValue());
+  
+      ValueParam enabledFuzzySearchValue = initParams.getValueParam(FUZZY_SEARCH_INDEX);
+      if (enabledFuzzySearchValue != null) {
+        try {
+          fuzzySearchIndex = Double.parseDouble(enabledFuzzySearchValue.getValue());
+        } catch (NumberFormatException e) {
+          log.warn("The current fuzzySearchIndex value is not a number, default value 0.5 will be used");
+          fuzzySearchIndex = 0.5;
+        }
+      }
+      if (fuzzySearchIndex < 0 || fuzzySearchIndex >= 1) {
+        log.warn("The current fuzzySearchIndex value is out of range from 0 to 1, default value 0.5 will be used");
+        fuzzySearchIndex = 0.5;
+      }
+    }
   }
 
   /* (non-Javadoc)
@@ -235,11 +268,15 @@
     QueryTermHelper queryTermHelper = new QueryTermHelper();    
     String queryTerm = null;
     keyword = keyword.replaceAll("'","''");
-    if (keyword.contains("*") || keyword.contains("?") || keyword.contains("~")) {
+    if (isEnabledFuzzySearch) {
+      if (keyword.contains("*") || keyword.contains("?") || keyword.contains("~")) {
+        queryTerm = queryTermHelper.contains(keyword).buildTerm();
+      } else {
+        queryTerm = queryTermHelper.contains(keyword).allowFuzzySearch(fuzzySearchIndex).buildTerm();
+      }      
+    } else {
       queryTerm = queryTermHelper.contains(keyword).buildTerm();
-    } else {
-      queryTerm = queryTermHelper.contains(keyword).allowFuzzySearch().buildTerm();
-    }      
+    }
     String scope = queryCriteria.getFulltextSearchProperty();
     if(QueryCriteria.ALL_PROPERTY_SCOPE.equals(scope) || scope == null) {
       queryBuilder.contains(null, queryTerm, LOGICAL.NULL);
Index: component/wcm/src/main/java/org/exoplatform/services/wcm/utils/AbstractQueryBuilder.java
===================================================================
--- component/wcm/src/main/java/org/exoplatform/services/wcm/utils/AbstractQueryBuilder.java	(revision 48644)
+++ component/wcm/src/main/java/org/exoplatform/services/wcm/utils/AbstractQueryBuilder.java	(working copy)
@@ -279,10 +279,7 @@
      * @return the query term helper
      */
     public QueryTermHelper contains(String s) {
-      if(s.indexOf(" ")>0) 
-        term = term.concat("\\" + s + "\\");
-      else
-        term = term.concat(s);
+      term = term.concat(s);
       return this;
     }
 
@@ -313,8 +310,8 @@
      * 
      * @return the query term helper
      */
-    public QueryTermHelper allowFuzzySearch() {
-      term = term.concat("~");
+    public QueryTermHelper allowFuzzySearch(double fuzzySearchIndex) {
+      term = term.concat("~").concat(String.valueOf(fuzzySearchIndex));
       return this; 
     }
     
Index: web/wcmportal/src/main/webapp/WEB-INF/conf/wcm/system-configuration.xml
===================================================================
--- web/wcmportal/src/main/webapp/WEB-INF/conf/wcm/system-configuration.xml	(revision 48644)
+++ web/wcmportal/src/main/webapp/WEB-INF/conf/wcm/system-configuration.xml	(working copy)
@@ -90,8 +90,39 @@
         </properties-param>
       </init-params>
   </component>
+  
+  <component>
+    <key>org.exoplatform.services.wcm.search.SiteSearchService</key>
+    <type>org.exoplatform.services.wcm.search.SiteSearchServiceImpl</type>
+    <init-params>
+      <value-param>
+        <name>isEnabledFuzzySearch</name>
+        <value>true</value>
+      </value-param>
+      <value-param>
+        <name>fuzzySearchIndex</name>
+        <value></value>
+      </value-param>
+    </init-params>
+  </component>
     
   <external-component-plugins>
+   <target-component>org.exoplatform.services.wcm.search.SiteSearchService</target-component>
+    <component-plugin>
+      <name>ExcludeMimeTypes</name>
+      <set-method>addExcludeIncludeDataTypePlugin</set-method>
+      <type>org.exoplatform.services.wcm.search.ExcludeIncludeDataTypePlugin</type>
+      <init-params>
+        <properties-param>
+          <name>search.exclude.datatypes</name>
+          <description>exclude some data type when search</description>
+          <property name="mimetypes" value="text/css,text/javascript,application/x-javascript,text/ecmascript"/>                                   
+        </properties-param>               
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>
+  
+  <external-component-plugins>
     <target-component>org.exoplatform.portal.config.UserACL</target-component>
     <component-plugin>
 	    <name>addPortalACLPlugin</name>
