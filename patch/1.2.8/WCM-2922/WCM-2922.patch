Index: component/wcm/src/main/java/org/exoplatform/services/wcm/images/RESTImagesRendererService.java
===================================================================
--- component/wcm/src/main/java/org/exoplatform/services/wcm/images/RESTImagesRendererService.java	(revision 63824)
+++ component/wcm/src/main/java/org/exoplatform/services/wcm/images/RESTImagesRendererService.java	(working copy)
@@ -17,6 +17,9 @@
 package org.exoplatform.services.wcm.images;
 
 import java.io.InputStream;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
 
 import javax.jcr.ItemNotFoundException;
 import javax.jcr.Node;
@@ -33,6 +36,7 @@
 import org.exoplatform.services.jcr.ext.common.SessionProvider;
 import org.exoplatform.services.log.ExoLogger;
 import org.exoplatform.services.rest.HTTPMethod;
+import org.exoplatform.services.rest.HeaderParam;
 import org.exoplatform.services.rest.InputTransformer;
 import org.exoplatform.services.rest.OutputTransformer;
 import org.exoplatform.services.rest.QueryParam;
@@ -53,6 +57,12 @@
 @URITemplate("/images/{repositoryName}/{workspaceName}/{nodeIdentifier}/")
 public class RESTImagesRendererService implements ResourceContainer{
 
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
+
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
   /** The session provider service. */
   private SessionProviderService sessionProviderService;
   
@@ -90,7 +100,7 @@
   @InputTransformer(PassthroughInputTransformer.class)
   @OutputTransformer(PassthroughOutputTransformer.class)
   public Response serveImage(@URIParam("repositoryName") String repository, @URIParam("workspaceName") String workspace,
-      @URIParam("nodeIdentifier") String nodeIdentifier) { 
+      @URIParam("nodeIdentifier") String nodeIdentifier, @HeaderParam("If-Modified-Since") String ifModifiedSince) { 
     Node node = null;
     SessionProvider sessionProvider = sessionProviderService.getSessionProvider(null);
     Session session = null;
@@ -113,9 +123,15 @@
         dataNode = session.getNodeByUUID(versionableUUID);
       }else {
         return Response.Builder.withStatus(HTTPStatus.NOT_FOUND).build();
-      }     
+      } 
+      
+      if (ifModifiedSince != null && isModified(ifModifiedSince, dataNode) == false) {
+      	return Response.Builder.notModified().build();
+      }
+      
       jcrData = dataNode.getNode("jcr:content").getProperty("jcr:data").getStream();
-      return Response.Builder.ok().entity(jcrData, "image").build();
+      DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+      return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).entity(jcrData, "image").build();
     } catch (PathNotFoundException e) {
       return Response.Builder.withStatus(HTTPStatus.NOT_FOUND).build();
     }catch (ItemNotFoundException e) {
@@ -143,7 +159,7 @@
   @InputTransformer(PassthroughInputTransformer.class)
   @OutputTransformer(PassthroughOutputTransformer.class)
   public Response serveImage(@URIParam("repositoryName") String repository, @URIParam("workspaceName") String workspace,
-      @URIParam("nodeIdentifier") String nodeIdentifier, @QueryParam("propertyName") String propertyName) {
+      @URIParam("nodeIdentifier") String nodeIdentifier, @QueryParam("propertyName") String propertyName, @HeaderParam("If-Modified-Since") String ifModifiedSince) {
     Node node = null;
     SessionProvider sessionProvider = sessionProviderService.getSessionProvider(null);
     Session session = null;
@@ -155,9 +171,15 @@
         node = session.getNodeByUUID(nodeIdentifier);
       if(node == null) {
         return Response.Builder.withStatus(HTTPStatus.NOT_FOUND).build();
-      }            
+      }           
+      
+      if (ifModifiedSince != null && isModified(ifModifiedSince, node) == false) {
+      	return Response.Builder.notModified().build();
+      }
+      
       InputStream jcrData = node.getProperty(propertyName).getStream();
-      return Response.Builder.ok().entity(jcrData, "image").build();
+      DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+      return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).entity(jcrData, "image").build();
     } catch (PathNotFoundException e) {
       return Response.Builder.withStatus(HTTPStatus.NOT_FOUND).build();
     }catch (ItemNotFoundException e) {
@@ -231,4 +253,44 @@
     return builder.append(accessURI).append("images/").append(repository).append("/").append(workspaceName)
       .append("/").append(nodeIdentifiler).append("?propertyName=").append(propertyName).toString();
   }
+  
+  /**
+   * get the last modified date of node
+ * @param node
+ * @return the last modified date
+ * @throws Exception
+ */
+  private Date getLastModifiedDate(Node node) throws Exception {
+	  Date lastModifiedDate = null;
+	  if (node.hasNode("jcr:content")) {
+		  lastModifiedDate = node.getNode("jcr:content").getProperty("jcr:lastModified").getDate().getTime();
+	  } else if (node.hasNode("exo:dateModified")) {
+    	  lastModifiedDate = node.getProperty("exo:dateModified").getDate().getTime();
+	  } else {
+		  lastModifiedDate = node.getProperty("jcr:created").getDate().getTime();
+	  }
+	  return lastModifiedDate;
+  }
+  
+  /**
+   * check resources were modified or not
+   * @param ifModifiedSince
+   * @param node
+   * @return
+   * @throws Exception
+   */
+  private boolean isModified(String ifModifiedSince, Node node) throws Exception {
+	  // get last-modified-since from header
+	  DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+	  Date ifModifiedSinceDate = dateFormat.parse(ifModifiedSince);
+
+	  // get last modified date of node
+	  Date lastModifiedDate = getLastModifiedDate(node);
+
+	  // Check if cached resource has not been modifed, return 304 code
+	  if (ifModifiedSinceDate.getTime() >= lastModifiedDate.getTime()) {			
+		return false;
+	  }		
+	  return true;
+  }
 }
Index: webui/wcm/src/main/java/org/exoplatform/wcm/webui/selector/content/UpdateTreeConnector.java
===================================================================
--- webui/wcm/src/main/java/org/exoplatform/wcm/webui/selector/content/UpdateTreeConnector.java	(revision 63824)
+++ webui/wcm/src/main/java/org/exoplatform/wcm/webui/selector/content/UpdateTreeConnector.java	(working copy)
@@ -15,9 +15,12 @@
  * along with this program; if not, see<http://www.gnu.org/licenses/>.
  */
 package org.exoplatform.wcm.webui.selector.content;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -77,7 +80,13 @@
   
   /** The log. */
   private static Log log = ExoLogger.getLogger(UpdateTreeConnector.class);
+  
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
 
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
   @HTTPMethod(HTTPMethods.GET)
   @URITemplate("/getChildNodes/")
   @OutputTransformer(XMLOutputTransformer.class)
@@ -137,7 +146,8 @@
     }
     CacheControl cacheControl = new CacheControl();
     cacheControl.setNoCache(true);
-    return Response.Builder.ok(document).mediaType("text/xml").cacheControl(cacheControl).build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok(document).header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).mediaType("text/xml").cacheControl(cacheControl).build();
   }
   
   /**
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/RssConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/RssConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/RssConnector.java	(working copy)
@@ -17,7 +17,10 @@
 package org.exoplatform.wcm.connector.collaboration;
 
 import java.io.ByteArrayInputStream;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -92,7 +95,13 @@
   
   /** The SUMMARY. */
   static private String SUMMARY = "exo:summary";
+  
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
 
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
   /** The repository service. */
   private RepositoryService repositoryService;
   
@@ -155,7 +164,8 @@
     contextRss.put(LINK, server + "/portal/public/"+siteName);
     String feedXML = generateRSS(contextRss);
     Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(feedXML.getBytes()));
-    Response response = Response.Builder.ok(document).build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    Response response = Response.Builder.ok(document).header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
     return response;
   }
   
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/VoteConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/VoteConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/VoteConnector.java	(working copy)
@@ -16,6 +16,10 @@
  */
 package org.exoplatform.wcm.connector.collaboration;
 
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
 import javax.jcr.Node;
 import javax.xml.parsers.DocumentBuilderFactory;
 
@@ -45,6 +49,12 @@
 @URITemplate("/contents/vote/")
 public class VoteConnector extends BaseConnector implements ResourceContainer {
 
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
+
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+	
   /**
    * Instantiates a new vote connector.
    * 
@@ -124,12 +134,14 @@
 			  element.appendChild(total);
 			  document.appendChild(element);
 
-			  return Response.Builder.ok(document, "text/xml").build();
+			  DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+			  return Response.Builder.ok(document, "text/xml").header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
 		  }
 	  } catch (Exception e) {
 		  Response.Builder.serverError().build();
-	  }    
-	  return Response.Builder.ok().build();
+	  } 
+	  DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+	  return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
   
   /*
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/ResourceBundleConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/ResourceBundleConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/collaboration/ResourceBundleConnector.java	(working copy)
@@ -16,6 +16,9 @@
  */
 package org.exoplatform.wcm.connector.collaboration;
 
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
 import java.util.Locale;
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
@@ -43,8 +46,14 @@
  */
 @URITemplate("/bundle/")
 public class ResourceBundleConnector implements ResourceContainer {
+	
+   /** The Constant LAST_MODIFIED_PROPERTY. */
+   private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
 
-	@HTTPMethod(HTTPMethods.GET)
+   /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+   private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
+  @HTTPMethod(HTTPMethods.GET)
   @URITemplate("/getBundle/")
   @OutputTransformer(XMLOutputTransformer.class)
   public Response getBundle (
@@ -69,7 +78,8 @@
 				}
 			}
 			document.appendChild(bundles);
-		  return Response.Builder.ok(document, "text/xml").build();
+			DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+			return Response.Builder.ok(document, "text/xml").header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
 		} catch (Exception e) {
 			return Response.Builder.serverError().build();
 		}
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/DriverConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/DriverConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/DriverConnector.java	(working copy)
@@ -17,9 +17,12 @@
 package org.exoplatform.wcm.connector.fckeditor;
 
 import java.io.InputStream;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -100,6 +103,12 @@
   /** The Constant MEDIA_MIMETYPE. */
   public static final String[] MEDIA_MIMETYPE = new String[]{"application", "image", "audio", "video"};
   
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
+
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+  
   /** The log. */
   private static Log log = ExoLogger.getLogger(DriverConnector.class);
 
@@ -158,7 +167,8 @@
     
     CacheControl cacheControl = new CacheControl();
     cacheControl.setNoCache(true);
-    return Response.Builder.ok(document).mediaType("text/xml").cacheControl(cacheControl).build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok(document).header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).mediaType("text/xml").cacheControl(cacheControl).build();
   }
 
   /**
@@ -208,7 +218,9 @@
     } catch (Exception e) {
       log.error("Error when perform getFoldersAndFiles: ", e);
     }    
-    return Response.Builder.ok().build();
+    
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
 	
 
@@ -296,7 +308,8 @@
     } catch (Exception e) {
       log.error("Error when perform processUpload: ", e);
     }
-    return Response.Builder.ok().build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
   
   /**
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/GadgetConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/GadgetConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/GadgetConnector.java	(working copy)
@@ -19,7 +19,10 @@
 import java.io.OutputStreamWriter;
 import java.net.URL;
 import java.net.URLConnection;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 import java.util.MissingResourceException;
@@ -76,6 +79,12 @@
   /** The log. */
   private static Log log = ExoLogger.getLogger(GadgetConnector.class);
   
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
+
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+  
   /**
    * Instantiates a new gadget connector.
    * 
@@ -124,7 +133,8 @@
     } catch (Exception e) {
       log.error("Error when perform getFoldersAndFiles: ", e.fillInStackTrace());
     }    
-    return Response.Builder.ok().build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
   
   /**
@@ -143,7 +153,8 @@
     Document document = rootElement.getOwnerDocument();
     CacheControl cacheControl = new CacheControl();
     cacheControl.setNoCache(true);
-    return Response.Builder.ok(document).mediaType("text/xml").cacheControl(cacheControl).build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok(document).header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).mediaType("text/xml").cacheControl(cacheControl).build();
   }
   
   /**
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/LinkConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/LinkConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/LinkConnector.java	(working copy)
@@ -16,6 +16,10 @@
  */
 package org.exoplatform.wcm.connector.fckeditor;
 
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
 import javax.jcr.Node;
 import javax.jcr.NodeIterator;
 
@@ -50,7 +54,13 @@
   
   /** The log. */
   private static Log log = ExoLogger.getLogger(LinkFileHandler.class);
+  
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
 
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
   /**
    * Instantiates a new link connector.
    * 
@@ -94,7 +104,8 @@
     } catch (Exception e) {
       log.error("Error when perform getFoldersAndFiles: ", e.fillInStackTrace());
     }    
-    return Response.Builder.ok().build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
 
   /*
Index: connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/PortalLinkConnector.java
===================================================================
--- connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/PortalLinkConnector.java	(revision 63824)
+++ connectors/fckeditor/src/main/java/org/exoplatform/wcm/connector/fckeditor/PortalLinkConnector.java	(working copy)
@@ -16,6 +16,7 @@
  */
 package org.exoplatform.wcm.connector.fckeditor;
 
+import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Comparator;
 import java.util.Date;
@@ -72,7 +73,13 @@
 
   /** The RESOURC e_ type. */
   final private String RESOURCE_TYPE       = "PortalPageURI".intern();
+  
+  /** The Constant LAST_MODIFIED_PROPERTY. */
+  private static final String LAST_MODIFIED_PROPERTY = "Last-Modified";
 
+  /** The Constant IF_MODIFIED_SINCE_DATE_FORMAT. */
+  private static final String IF_MODIFIED_SINCE_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss z";
+
   /** The portal data storage. */
   private DataStorage  portalDataStorage;
 
@@ -124,7 +131,8 @@
     } catch (Exception e) {
       log.error("Error when perform getPageURI: ", e.fillInStackTrace());
     }    
-    return Response.Builder.ok().build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok().header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).build();
   }
 
   /**
@@ -162,7 +170,8 @@
     }
     CacheControl cacheControl = new CacheControl();
     cacheControl.setNoCache(true);
-    return Response.Builder.ok(document).mediaType("text/xml").cacheControl(cacheControl).build();
+    DateFormat dateFormat = new SimpleDateFormat(IF_MODIFIED_SINCE_DATE_FORMAT);
+    return Response.Builder.ok(document).header(LAST_MODIFIED_PROPERTY, dateFormat.format(new Date())).mediaType("text/xml").cacheControl(cacheControl).build();
   }
 
   /**
