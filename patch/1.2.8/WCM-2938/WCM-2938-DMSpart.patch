Index: core/component/cms/src/main/java/org/exoplatform/services/cms/taxonomy/impl/TaxonomyServiceImpl.java
===================================================================
--- core/component/cms/src/main/java/org/exoplatform/services/cms/taxonomy/impl/TaxonomyServiceImpl.java	(revision 65165)
+++ core/component/cms/src/main/java/org/exoplatform/services/cms/taxonomy/impl/TaxonomyServiceImpl.java	(working copy)
@@ -164,15 +164,18 @@
    */
   public Node getTaxonomyTree(String repository, String taxonomyName, boolean system)
       throws RepositoryException {
-    try {
+	try {
       Node taxonomyDef = getRootTaxonomyDef(repository);
-      Node taxonomyTree = taxonomyDef.getNode(taxonomyName);
+      Node taxonomyTree = taxonomyDef.getNode(taxonomyName);    
       if (taxonomyTree.isNodeType(EXOSYMLINK_LINK))
         return linkManager_.getTarget(taxonomyTree, system);
+      
+    } catch (ItemNotFoundException e) {
+    	return null;   	
+    } catch (PathNotFoundException e2) {  
+        return null;
     } catch (RepositoryConfigurationException e1) {
       throw new RepositoryException(e1);
-    } catch (PathNotFoundException e2) {
-      throw new RepositoryException(e2);
     }
     return null;
   }
@@ -234,17 +237,24 @@
       String repository = repositoryService_.getDefaultRepository().getConfiguration().getName();
       if (hasTaxonomyTree(repository, taxonomyName)) {
         Node targetNode = getTaxonomyTree(repository, taxonomyName, true);
+        if(targetNode != null) {
         session = targetNode.getSession();
         targetNode.remove();
         session.save();
+        }
         Node taxonomyDef = getRootTaxonomyDef(repository);
         Node taxonomyTree = taxonomyDef.getNode(taxonomyName);
         taxonomyTree.remove();
         taxonomyDef.getSession().save();
+      }else{
+    	Node taxonomyDef = getRootTaxonomyDef(repository);
+        taxonomyDef.getSession().save(); 
       }
     } catch (RepositoryConfigurationException e) {
       throw new RepositoryException(e);
-    } finally {
+    }catch (PathNotFoundException e){
+    	
+    } finally {    	
       if(session != null) session.logout();
     }
   }
Index: core/component/cms/src/main/java/org/exoplatform/services/cms/actions/impl/BaseActionLauncherListener.java
===================================================================
--- core/component/cms/src/main/java/org/exoplatform/services/cms/actions/impl/BaseActionLauncherListener.java	(revision 65165)
+++ core/component/cms/src/main/java/org/exoplatform/services/cms/actions/impl/BaseActionLauncherListener.java	(working copy)
@@ -79,13 +79,15 @@
         node = (Node) jcrSession.getItem(srcPath_);
         String userId = event.getUserID();
         Node actionNode = actionServiceContainer.getAction(node, actionName_);
-        Property rolesProp = actionNode.getProperty("exo:roles");        
-        Value[] roles = rolesProp.getValues();        
-        boolean hasPermission = checkExcetuteable(userId, roles, identityRegistry) ;
-        if (!hasPermission) {
-          jcrSession.logout();
-          return;
-        }          
+        if (actionNode != null) {
+        	Property rolesProp = actionNode.getProperty("exo:roles");   
+        	Value[] roles = rolesProp.getValues();        
+            boolean hasPermission = checkExcetuteable(userId, roles, identityRegistry) ;
+            if (!hasPermission) {
+                jcrSession.logout();
+                return;
+              }         
+        } 
         String path = event.getPath();
         Map<String, String> variables = new HashMap<String, String>();
         variables.put("initiator", userId);
Index: core/component/cms/src/main/java/org/exoplatform/services/cms/link/impl/LinkManagerImpl.java
===================================================================
--- core/component/cms/src/main/java/org/exoplatform/services/cms/link/impl/LinkManagerImpl.java	(revision 65165)
+++ core/component/cms/src/main/java/org/exoplatform/services/cms/link/impl/LinkManagerImpl.java	(working copy)
@@ -111,12 +111,15 @@
   /**
    * {@inheritDoc}
    */
-  public Node getTarget(Node link, boolean system) throws ItemNotFoundException,
+  public Node getTarget(Node link, boolean system) throws 
       RepositoryException {
-    String uuid = link.getProperty(UUID).getString();
-    Session session = getSession(link, system);
-    Node targetNode = session.getNodeByUUID(uuid);
-    return targetNode;
+    try{
+    	String uuid = link.getProperty(UUID).getString();
+        return getSession(link, system).getNodeByUUID(uuid);
+    }catch (ItemNotFoundException e){
+    	return link;
+    }
+	  
   }
 
   private Session getSession(Node link, boolean system) throws RepositoryException {
